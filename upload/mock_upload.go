// Automatically generated by MockGen. DO NOT EDIT!
// Source: upload.go

package upload

import (
	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
)

// Mock of UploadMock interface
type MockUploadMock struct {
	ctrl     *gomock.Controller
	recorder *_MockUploadMockRecorder
}

// Recorder for MockUploadMock (not exported)
type _MockUploadMockRecorder struct {
	mock *MockUploadMock
}

func NewMockUploadMock(ctrl *gomock.Controller) *MockUploadMock {
	mock := &MockUploadMock{ctrl: ctrl}
	mock.recorder = &_MockUploadMockRecorder{mock}
	return mock
}

func (_m *MockUploadMock) EXPECT() *_MockUploadMockRecorder {
	return _m.recorder
}

func (_m *MockUploadMock) Upload(bucket string, uploadKey string, localPath string) error {
	ret := _m.ctrl.Call(_m, "Upload", bucket, uploadKey, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUploadMockRecorder) Upload(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Upload", arg0, arg1, arg2)
}

func (_m *MockUploadMock) getS3Instance() *s3.S3 {
	ret := _m.ctrl.Call(_m, "getS3Instance")
	ret0, _ := ret[0].(*s3.S3)
	return ret0
}

func (_mr *_MockUploadMockRecorder) getS3Instance() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getS3Instance")
}

func (_m *MockUploadMock) uploadFile(bucket string, uploadKey string, localPath string) error {
	ret := _m.ctrl.Call(_m, "uploadFile", bucket, uploadKey, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUploadMockRecorder) uploadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "uploadFile", arg0, arg1, arg2)
}
